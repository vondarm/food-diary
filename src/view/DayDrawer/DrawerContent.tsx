import { type FC, type ReactNode } from "react";
import dayjs, { type Dayjs } from "dayjs";
import { useKcalForDay } from "../CoreAdapter.tsx";
import {
  getDayOvereatingLevel,
  type OvereatingLevel,
} from "../../core/meals/overeatingLevel.ts";
import { Alert, Stack } from "@mui/material";
import { DatePicker } from "@mui/x-date-pickers";
import { onModalDay } from "./data.ts";
import { DayTable } from "./DayTable.tsx";
import { NewMealForm } from "./NewMealForm";
import type { AlertProps } from "@mui/material/Alert";
import ReportProblemIcon from "@mui/icons-material/ReportProblem";
import RestaurantMenuIcon from "@mui/icons-material/RestaurantMenu";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";

export const DayDrawerContent: FC<{ day: Dayjs }> = ({ day }) => {
  const today = dayjs();

  const isToday = day.diff(today.startOf("day"), "millisecond");
  const kcal = useKcalForDay(day);

  const overeatingLevel = getDayOvereatingLevel(kcal, 2500);
  const color = getDayColorByOvereatingLevel(overeatingLevel, isToday);
  const text = getDayDescriptionByOvereatingLevel(overeatingLevel, isToday);

  return (
    <Stack
      direction={"column"}
      alignItems={"center"}
      spacing={2}
      padding={2}
      style={{ height: "85dvh" }}
    >
      <Stack
        direction={"row"}
        spacing={2}
        flexWrap={"wrap"}
        useFlexGap
        justifyContent={"space-around"}
      >
        <DatePicker value={day} onChange={onModalDay} />
        <Alert
          style={{ alignItems: "center" }}
          icon={getIconByOvereatingLevel(overeatingLevel, isToday)}
          severity={isToday > 0 ? "info" : color}
        >
          {text}
        </Alert>
      </Stack>
      <DayTable day={day} />
      <NewMealForm day={day} />
    </Stack>
  );
};

const getDayColorByOvereatingLevel = (
  level: OvereatingLevel,
  isToday: number,
): AlertProps["severity"] => {
  if (isToday > 0) {
    return "info";
  }
  switch (level) {
    case "low":
      return "info";
    case "normal":
      return "success";
    case "high":
      return "warning";
    case "extra high":
      return "error";
    case "incredible":
      return "error";
  }
};

const getIconByOvereatingLevel = (
  level: OvereatingLevel,
  isToday: number,
): ReactNode => {
  if (isToday > 0) {
    return <ReportProblemIcon />;
  }
  switch (level) {
    case "low":
      return <RestaurantMenuIcon />;
    case "normal":
      return <CheckCircleIcon />;
    case "high":
      return <ReportProblemIcon />;
    case "extra high":
      return "üê∑";
    case "incredible":
      return "üê∑";
  }
};

const getDayDescriptionByOvereatingLevel = (
  level: OvereatingLevel,
  isToday: number,
): string => {
  if (isToday > 0) {
    return "–≠—Ç–æ—Ç –¥–µ–Ω—å –µ—â–µ –Ω–µ –Ω–∞—Å—Ç–∞–ª. –°—Ç—Ä–∞–Ω–Ω–æ –µ—Å–ª–∏ —Ç—É—Ç —á—Ç–æ —Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.";
  }
  if (isToday === 0) {
    switch (level) {
      case "low":
        return "–°–µ–≥–æ–¥–Ω—è –µ—â–µ –º–æ–∂–Ω–æ –ø–æ–µ—Å—Ç—å";
      case "normal":
        return "–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—â–∏–π –¥–µ–Ω—å. –ì–ª–∞–≤–Ω–æ–µ –≤—Å–µ –Ω–µ –∏—Å–ø–æ—Ä—Ç–∏—Ç—å";
      case "high":
        return "–ö–∞–∂–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è –º—ã –ø–µ—Ä–µ–µ–ª–∏. –ü–æ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è";
      case "extra high":
        return "–°–µ–≥–æ–¥–Ω—è –º—ã —É–∂–µ –æ–±–æ–∂—Ä–∞–ª–∏—Å—å. –ú–æ–∂–µ—Ç —Ö–≤–∞—Ç–∏—Ç?";
      case "incredible":
        return "–ö–∞–∂–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –Ω–µ—á–µ–≥–æ —Ç–µ—Ä—è—Ç—å";
    }
  }
  if (isToday < 0) {
    switch (level) {
      case "low":
        return "–í —Ç–æ—Ç –¥–µ–Ω—å –º—ã —Å–∫—É—à–∞–ª–∏ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ";
      case "normal":
        return "–ë—ã–ª —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å. –ü–æ–∫—É—à–∞–ª–∏ –≤ —Å–∞–º—ã–π —Ä–∞–∑";
      case "high":
        return "–í —Ç–æ—Ç –¥–µ–Ω—å –º—ã –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–±—Ä–∞–ª–∏";
      case "extra high":
        return "–í —Ç–æ—Ç –¥–µ–Ω—å –º—ã —Å–µ—Ä—å–µ–∑–Ω–æ –æ–±—ä–µ–ª–∏—Å—å";
      case "incredible":
        return "–ë—ã–ª —Å–∫–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å. –û–±–æ–∂—Ä–∞–ª–∏—Å—å –∫–∞–∫ —Å–≤–∏–Ω–æ—Ç–∞";
    }
  }
  return "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ, –∑–Ω–∞—á–∏—Ç —á—Ç–æ —Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å";
};
